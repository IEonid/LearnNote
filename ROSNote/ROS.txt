
Note:初始化ROS时可能会找不到rosdep命令
solution: $ sudo apt install python-rosdep

catkin_make
文件：DARwin-OP on the ROS
Note:Gazebo可先不装


http://www.rosclub.cn/post/39
% 安装gazebo


http://www.generationrobots.com/en/content/75-gazebo-and-ros
% Gazebo robotics simulator with ROS tutorial


http://www.ros.org/news/2015/02/darwin-op-package-for-rosgazebo-available.html	%3 packages for simulating the Darwin OP robot on Gazebo
http://blog.csdn.net/u013166794/article/details/51212255
% 博客Darwin_gazebo Simulation Demo


【ros bug】rplidar.launch is neither a launch file in package...
解决 ：$ source ./catkin_ws/devel/setup.bash
% You will need to run this command on every new shell you open to have access to the ROS commands, unless you add this line to your .bashrc. 
% This process allows you to install several ROS distributions (e.g. indigo and kinetic) on the same computer and switch between them.
% To make sure your workspace is properly overlayed by the setup script, make sure ROS_PACKAGE_PATH environment variable includes the directory you're in.
% $ echo $ROS_PACKAGE_PATH
% /home/youruser/catkin_ws/src:/opt/ros/kinetic/share


% If you are ever having problems finding or using your ROS packages make sure that you have your environment properly setup.
% A good way to check is to ensure that environment variables like ROS_ROOT and ROS_PACKAGE_PATH are set:
$ printenv | grep ROS

【kinova】
https://github.com/Kinovarobotics/kinova-ros
% Kinovarobotics/kinova-ros
step1:Gazebo for Kinova robots
step2:Install MoveIt
step3:follow the web commands
step4:http://www.knowsky.com/1052501.html
% 使用ROS对Kinova 初始化时1015错误的解决方法
step4:https://github.com/Kinovarobotics/kinova-ros/wiki/Gazebo
% $ roslaunch kinova_gazebo robot_launch.launch kinova_robotType:=j2n6s300

$ roscore
$ rosrun turtlesim turtlesim_node
$ rosrun turtlesim turtle_teleop_key 

$ rospack find [package_name]
$ rosnode list
$ rosnode info [node_name]
$ sudo apt-get install ros-<distro>-rqt
$ sudo apt-get install ros-<distro>-rqt-common-plugins
$ rosrun rqt_graph rqt_graph
$ rostopic -h %(help)
$ rostopic list
$ rostopic type [topic] %show the message type of the topic
$ rosmsg show [message_type] %show the detail information the the message type
$ rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'
$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'
$ rostopic hz [topic]
$ rosrun rqt_plot rqt_plot

$ rosservice list          		   %print information about active services
$ rosservice call [service] [args]         %call the service with the provided args
$ rosservice type [service]                %print service type
$ rosservice find [service_type]           %find services by service type
$ rosservice uri                           %print service ROSRPC uri
% std_srvs/Empty 意味着当调用这个服务时不带任何参数
$ rosservice call spawn 2 2 0.2 "<newObjectName>"

% rosparam允许你储存和操作在ROS parameter server上的数据，parameter server可以储存整形，浮点型，布尔型，
% 字典型和链表型的数据．rosparam 使用YAML 审定语言以符合语法．简单的例子：YAML看起来十分自然，１是整形，
% 1.0是浮点型，one是字符串，true是布尔型，[1,2,3]是一列的整形，{a:b,c:d}是字典型，rosparam有许多命令可以
% 运行用在parameters上，如下所示：
$ rosparam list                            %list parameter names
$ rosparam set [param_name][args]          %set parameter
$ rosparam get [param_name]                %get parameter
$ rosparam get /                           %显示整个参数服务器的内容
$ rosparam load [file_name] [namespace]    %load parameters from file
$ rosparam dump [file_name] [namespace]    %dump parameters to file
$ rosparam delete                          %delete parameter
$ rosservice call clear                    %使修改生效
$ rosparam dump params.yaml
$ rosparam load params.yaml copy
$ rosparam get copy/background_b

$ rosrun rqt_console rqt_console
$ rosrun rqt_logger_level rqt_logger_level

$ roslaunch [package] [filename.launch]    %一次启动许多nodes

$ rosed [package_name] [filename]
$ rosed [package_name] <tab><tab>          %可以看到package中的可以编辑的文件
$ export EDITOR='nano -w'		   %启用nano编辑工具
要设置默认编辑器可以在~/.bashrc文件中添加 export EDITOR='emacs -nw'

