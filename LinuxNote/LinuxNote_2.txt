shell脚本文件首行指定要使用的shell,格式为:
	#!/bin/bash
修改执行权限之后,可以$./fileName直接运行,或者修改$PATH环境变量
echo -n " "|' ' 将自定义文本信息和命令输出显示在同一行,字符串末端要有空格
将命令输出赋值给变量的两种方法:
	1)temp=`date`
	2)temp=$(date)
命令替换会创建一个子shell来运行对应的命令,因而无法使用用户变量
重定向输入和输出:
	覆盖输出到文件:COMMAND > FILENAME
		eg:today = `date +%y%m%d%H%M%S`
		   ls /usr/bin -al > log.$today 
	追加输出到文件:COMMAND >> FILENAME
	重定向文件到命令: COMMAND < FILENAME
		eg: $wc < FILENAME 显示文本的行数,单词数,字节数
	内联输入重定向:FILENAME << MARKER; DATE; MARKER
管道: COMMAND1 | COMMAND2 第一个指令的输出通过管道传给第二个命令
	eg: $ ls /usr/bin -al | sort | more
整数计算:1)var1=$(expr 5 \* 2) 符号'*'需要转义,否则识别为通配符
	2)var1=$[5 * 2] 执行数学表达式的简单方法
bash shell只能处理整数,包括test命令
浮点运算:$ bc 访问bash计算器, quit退出, scale控制小数位数
	脚本操作:1)var1=$(echo 'scale=4; 3.44 / 5' | bc)
		2)var1=$(bc << EOF
		  scale=4
		  3.44 / 5
		  EOF
		  )
$ echo $? 退出状态码为0表明命令执行成功了,可以在shell脚本中用exit NUM来声明退出状态码

[结构化命令]
if-then语句格式:
	if COMMAND; then
		COMMAND
	...elif COMMAND; then (嵌套if-then)
		...COMMAND
	...else
		...COMMAND
	fi
if-then语句测试状态码外的条件
	1) if test CONDITION
	2) if [ CONDITION ]  (注意空格)
	3) if [ CONDITION1 ] && [ CONDITION2 ]
	4) if [ CONDITION1 ] || [ CONDITION2 ]
	5) if (( MATHEMATICAL EXPRESSION ))
	6) if [[ $USER == r* ]]  字符串模式匹配
数值比较: -eq -ne -ge -gt -le -lt
字符串比较: = != \>(转义,否则识别为重定向) \< -n(放在字符串前,测试是否长度非零) -z
文件比较: -d -e -f -r -s -w -x -O -G (file1 -nt file2) (file1 -ot file2)
case语句格式:
	case VARIABLE in
	PATTERN1 | PATTERN2) COMMANDS1;;
	PATTERN3) COMMANDS2;;
	*) COMMANDS;;
	esac

for语句格式:
1.	for VARIABLE in LIST; do
		COMMANDS
	done
2.	for (( i = 1; i <= 10; i++ )); do
		COMMANDS
	done
更改字段分隔符:IFS环境变量,eg: IFS=$'\n' : ; "
用通配符读取目录,eg: for myFile in /home/IEonid/* /home/cglin/*; do...

while语句格式:(可以在多行上列出多个测试命令,以最后一个测试命令为循环的条件)
	while CONDITION; do
		COMMANDS
	done
until语句格式:(与while结构相反,当条件为真时结束循环)
	until CONDITION; do
		COMMANDS
	done
循环处理文件数据:
	IFS.OLD=$IFS
	IFS=$'\n'
	for entry in $(cat /etc/passwd); do
	        IFS=:
       		for value in $entry; do
        	        echo "  $value"
        	done
	done
break NUM; continue NUM
可在循环结束标志done处,对循环的输出进行重定向或者管道,eg:done | sort
用read指令读取.csv文件:
	input='data.csv'
	while IFS=',' read -r user passwd
	do
	        echo "user: $user, passwd: $passwd"
	done < $input

